---
layout: post
title: "ASP.NET MVC e suas ActionResult"
---
<p>
  O framework <span class="caps">MVC</span> da Microsoft usa um determinado objeto para definir qual tipo de resultado/output
  a <em>action</em> executada deve retornar. São eles:
</p>

<ul>
  <li><code>ContentResult</code> - Pode ser usado para retornar textos simples.</li>
  <li><code>EmptyResult</code> - Esse serve para retornar resultados em branco, quando quiser que o output seja vazio.</li>
  <li><code>HttpUnauthorizedResult</code> - Usado quando o usuário não tem permissão para executar a action. Retorna o 401 como <em>status</em> da requisição.</li>
  <li><code>JsonResult</code> - Serializa um objeto em formato JSON, bom para ser usando em requisições AJAX.</li>
  <li><code>RedirectResult</code> - Resultado usado para redirecionamentos.</li>
  <li><code>RedirectToRouteResult</code> - Também usado para redirecionamentos, mas a URL está ligada a uma rota.</li>
  <li>
    <code>ViewResultBase</code> - Classe abstrata, usada para renderizar HTMLs.
    <ul>
      <li><code>PartialViewResult</code> - Estende <code>ViewResultBase</code> para renderizar as views e seus HTMLs.</li>
    </ul>
  </li>
  <li>
    <code>BinaryResult</code> - Classe abstrata usada para resultados binários.
    <ul>
      <li><code>BinaryStreamResult</code> - Estende <code>BinaryResult</code>, pode ser usado para escrever imagens direto no stream do resutado.</li>
    </ul>
  </li>
</ul>

<p>Porém, em alguns casos, retornar um texto simples, ou um JSON pequeninho, é meio chato. Considere o código abaixo:</p>

{% highlight c# %}
JsonResult json = new JsonResult();
json.ContentType = "text/javascript";
json.Data = new { success = true };
return json;
{% endhighlight %}

<p>Isso poderia ser mais simples não? Porém, a classe <code>JsonResult</code>, e nenhuma outra <code>ActionResult</code> aceita parâmetros no construtor. Por isso criei <a href="http://gist.github.com/138225">duas classes</a> que podem ser usadas como <code>ActionResult</code>, para simplificar essa tarefa. Elas devem ser usadas assim:</p>

{% highlight c# %}
return new SimpleResult("Hello World");
return new SimpleResult(1);
return new SimpleResult(1257.14);
return new SimpleResult(true);
{% endhighlight %}

<p>e</p>

{% highlight c# %}
return new SimpleJsonResult(new { success = true });
{% endhighlight %}

<p>Pronto, agora é hora de refatorar código. :)</p>
<p><strong>UPDATE:</strong> Conforme o Guilherme comentou ali embaixo, o ASP.NET MVC tem um método que já simplifica as coisas.</p>

{% highlight c# %}
return Json("Hello World");
return Json(1);
return Json(1257.14);
return Json(true);
{% endhighlight %}

<p>e</p>

{% highlight c# %}
return Json(new { success = true });
{% endhighlight %}