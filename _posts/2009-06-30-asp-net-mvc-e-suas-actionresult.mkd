---
layout: post
title: "ASP.NET MVC e suas ActionResult"
---
<p>
  O framework <span class="caps">MVC</span> da Microsoft usa um determinado objeto para definir qual tipo de resultado/output
  a <em>action</em> executada deve retornar. São eles:
</p>

<ul>
  <li><code>ContentResult</code> - Pode ser usado para retornar textos simples.</li>
  <li><code>EmptyResult</code> - Esse serve para retornar resultados em branco, quando quiser que o output seja vazio.</li>
  <li><code>HttpUnauthorizedResult</code> - Usado quando o usuário não tem permissão para executar a action. Retorna o 401 como <em>status</em> da requisição.</li>
  <li><code>JsonResult</code> - Serializa um objeto em formato JSON, bom para ser usando em requisições AJAX.</li>
  <li><code>RedirectResult</code> - Resultado usado para redirecionamentos.</li>
  <li><code>RedirectToRouteResult</code> - Também usado para redirecionamentos, mas a URL está ligada a uma rota.</li>
  <li>
    <code>ViewResultBase</code> - Classe abstrata, usada para renderizar HTMLs.
    <ul>
      <li><code>PartialViewResult</code> - Estende <code>ViewResultBase</code> para renderizar as views e seus HTMLs.</li>
    </ul>
  </li>
  <li>
    <code>BinaryResult</code> - Classe abstrata usada para resultados binários.
    <ul>
      <li><code>BinaryStreamResult</code> - Estende <code>BinaryResult</code>, pode ser usado para escrever imagens direto no stream do resutado.</li>
    </ul>
  </li>
</ul>

<p>Porém, em alguns casos, retornar um texto simples, ou um JSON pequeninho, é meio chato. Considere o código abaixo:</p>

<pre class="sunburst">JsonResult json = <span class="Keyword">new</span> JsonResult();
json.ContentType = <span class="String"><span class="String">&quot;</span>text/javascript<span class="String">&quot;</span></span>;
json.Data = <span class="Keyword">new</span> { success = <span class="Keyword">true</span> };
<span class="Keyword">return</span> json;
</pre>

<p>Isso poderia ser mais simples não? Porém, a classe <code>JsonResult</code>, e nenhuma outra <code>ActionResult</code> aceita parâmetros no construtor. Por isso criei <a href="http://gist.github.com/138225">duas classes</a> que podem ser usadas como <code>ActionResult</code>, para simplificar essa tarefa. Elas devem ser usadas assim:</p>

<pre class="sunburst"><span class="Keyword">return</span> <span class="Keyword">new</span> SimpleResult(<span class="String"><span class="String">&quot;</span>Hello World<span class="String">&quot;</span></span>);
<span class="Keyword">return</span> <span class="Keyword">new</span> SimpleResult(<span class="Constant">1</span>);
<span class="Keyword">return</span> <span class="Keyword">new</span> SimpleResult(<span class="Constant">1257.14</span>);
<span class="Keyword">return</span> <span class="Keyword">new</span> SimpleResult(<span class="Keyword">true</span>);
</pre>

<p>e</p>

<pre class="sunburst"><span class="Keyword">return</span> <span class="Keyword">new</span> SimpleJsonResult(<span class="Keyword">new</span> { success = <span class="Keyword">true</span> });
</pre>

<p>Pronto, agora é hora de refatorar código. :)</p>
<p><strong>UPDATE:</strong> Conforme o Guilherme comentou ali embaixo, o ASP.NET MVC tem um método que já simplifica as coisas.</p>

<pre class="sunburst"><span class="Keyword">return</span> Json(<span class="String"><span class="String">&quot;</span>Hello World<span class="String">&quot;</span></span>);
<span class="Keyword">return</span> Json(<span class="Constant">1</span>);
<span class="Keyword">return</span> Json(<span class="Constant">1257.14</span>);
<span class="Keyword">return</span> Json(<span class="Keyword">true</span>);
</pre>

<p>e</p>

<pre class="sunburst"><span class="Keyword">return</span> Json(<span class="Keyword">new</span> { success = <span class="Keyword">true</span> });
</pre>